
@command
def generate(app):
    """
    Generate json, and dpath files from html in build directory.
    """
    with working_dir('build'):
        print(get_current_dir())
        for path in find("./", "*.html"):
            print(get_base_name(path))

            
            #extract json from html using *htmlq*
            cmd = "htmlq -f " + get_base_name(path) + " '#pageData' " 
            result = call(cmd)
            result = replace(result, '<script id="pageData" type="application/json">', '', count=1)
            result = replace(result, '</script>', '', count=1)
            # write json file
            write(get_name_stem(path) + ".json", result)


            # process json file using *jq* to get description paths (dpath)
            cmd = "jq -cf ../program.jq " + get_name_stem(path) + ".json"
            print('cmd:' + cmd)
            result = call(cmd)

            result = replace(result,'","','.' )
            result = replace(result,'\["', get_name_stem(path)+'.' )
            result = replace(result,'"\]','' )
            # write dpath file
            write(get_name_stem(path) + ".dpath", result)

            
            
            print(result)

@command
def populate(app):
    """
    Generate markdown files from json, and dpath files in build directory.
    """
    with working_dir('build'):


        print(get_current_dir())
        for path in find("./", "*.dpath"):
            mdfile=get_name_stem(path)
            write('../pages/'+mdfile+'.md', '# '+ mdfile + '\npage:: ' +mdfile +'\n\n')

            print(mdfile)
            for line in read_lines(path):
                line = line.rstrip()
                
                heading = first_and_final(line)
            
                cmd = 'jq .' + all_except_first(line) + ' ' + get_name_stem(path) + ".json"
                
                try:
                    result = call(cmd)
                    print(result)
                    
                    #write('../pages/'+ line +'.md', "# " +line + "\n\n" + result)
                    append('../pages/'+mdfile+'.md', '## '+heading +'\n\ntree:: [[' + line +']]\ndescription:: ' + result + '\n\n')

                except:
                    append('../pages/error.md', '## '+heading +'\n\ntree:: [[' + line +']]\ndescription:: Error \n\n')


def first_and_final(str):
    res = str.split('.')
    fir = res[0]
    fin = res[len(res)-2]
    return(fir+'.' +fin)


def all_except_first(str):
    res = str.split('.', 1)[1]
    return(res)

            
